/* tslint:disable */
/* eslint-disable */
/**
 * Simple Kanban API
 * A simple kanban API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LabelOut } from './LabelOut';
import {
    LabelOutFromJSON,
    LabelOutFromJSONTyped,
    LabelOutToJSON,
    LabelOutToJSONTyped,
} from './LabelOut';

/**
 * 
 * @export
 * @interface BoardOut
 */
export interface BoardOut {
    /**
     * 
     * @type {number}
     * @memberof BoardOut
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof BoardOut
     */
    title: string;
    /**
     * 
     * @type {Array<LabelOut>}
     * @memberof BoardOut
     */
    labels: Array<LabelOut>;
    /**
     * 
     * @type {string}
     * @memberof BoardOut
     */
    description: string;
    /**
     * 
     * @type {Date}
     * @memberof BoardOut
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof BoardOut
     */
    updatedAt: Date;
}

/**
 * Check if a given object implements the BoardOut interface.
 */
export function instanceOfBoardOut(value: object): value is BoardOut {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('labels' in value) || value['labels'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function BoardOutFromJSON(json: any): BoardOut {
    return BoardOutFromJSONTyped(json, false);
}

export function BoardOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): BoardOut {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'title': json['title'],
        'labels': ((json['labels'] as Array<any>).map(LabelOutFromJSON)),
        'description': json['description'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function BoardOutToJSON(json: any): BoardOut {
    return BoardOutToJSONTyped(json, false);
}

export function BoardOutToJSONTyped(value?: BoardOut | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'title': value['title'],
        'labels': ((value['labels'] as Array<any>).map(LabelOutToJSON)),
        'description': value['description'],
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
    };
}

