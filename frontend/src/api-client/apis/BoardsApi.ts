/* tslint:disable */
/* eslint-disable */
/**
 * Simple Kanban API
 * A simple kanban API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BoardInCreate,
  BoardInUpdate,
  BoardOut,
  CardInCreate,
  CardOut,
  HTTPValidationError,
  UserOutPublic,
} from '../models/index';
import {
    BoardInCreateFromJSON,
    BoardInCreateToJSON,
    BoardInUpdateFromJSON,
    BoardInUpdateToJSON,
    BoardOutFromJSON,
    BoardOutToJSON,
    CardInCreateFromJSON,
    CardInCreateToJSON,
    CardOutFromJSON,
    CardOutToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    UserOutPublicFromJSON,
    UserOutPublicToJSON,
} from '../models/index';

export interface CreateBoardApiBoardsPostRequest {
    boardInCreate: BoardInCreate;
}

export interface CreateCardsApiBoardsBoardIdCardsPostRequest {
    boardId: number;
    cardInCreate: Array<CardInCreate>;
}

export interface DeleteBoardApiBoardsBoardIdDeleteRequest {
    boardId: number;
}

export interface GetBoardApiBoardsBoardIdGetRequest {
    boardId: number;
}

export interface ListCardsApiBoardsBoardIdCardsGetRequest {
    boardId: number;
}

export interface ListUsersApiBoardsBoardIdUsersGetRequest {
    boardId: number;
}

export interface ShareBoardApiBoardsBoardIdUsersUserIdPutRequest {
    userId: number;
    boardId: number;
}

export interface UnshareBoardApiBoardsBoardIdUsersUserIdDeleteRequest {
    userId: number;
    boardId: number;
}

export interface UpdateBoardApiBoardsBoardIdPatchRequest {
    boardId: number;
    boardInUpdate: BoardInUpdate;
}

/**
 * 
 */
export class BoardsApi extends runtime.BaseAPI {

    /**
     * Create Board
     */
    async createBoardApiBoardsPostRaw(requestParameters: CreateBoardApiBoardsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BoardOut>> {
        if (requestParameters['boardInCreate'] == null) {
            throw new runtime.RequiredError(
                'boardInCreate',
                'Required parameter "boardInCreate" was null or undefined when calling createBoardApiBoardsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/boards`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BoardInCreateToJSON(requestParameters['boardInCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BoardOutFromJSON(jsonValue));
    }

    /**
     * Create Board
     */
    async createBoardApiBoardsPost(requestParameters: CreateBoardApiBoardsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BoardOut> {
        const response = await this.createBoardApiBoardsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Cards
     */
    async createCardsApiBoardsBoardIdCardsPostRaw(requestParameters: CreateCardsApiBoardsBoardIdCardsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CardOut>>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling createCardsApiBoardsBoardIdCardsPost().'
            );
        }

        if (requestParameters['cardInCreate'] == null) {
            throw new runtime.RequiredError(
                'cardInCreate',
                'Required parameter "cardInCreate" was null or undefined when calling createCardsApiBoardsBoardIdCardsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/boards/{board_id}/cards`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['cardInCreate']!.map(CardInCreateToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CardOutFromJSON));
    }

    /**
     * Create Cards
     */
    async createCardsApiBoardsBoardIdCardsPost(requestParameters: CreateCardsApiBoardsBoardIdCardsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CardOut>> {
        const response = await this.createCardsApiBoardsBoardIdCardsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Board
     */
    async deleteBoardApiBoardsBoardIdDeleteRaw(requestParameters: DeleteBoardApiBoardsBoardIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling deleteBoardApiBoardsBoardIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/boards/{board_id}`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Board
     */
    async deleteBoardApiBoardsBoardIdDelete(requestParameters: DeleteBoardApiBoardsBoardIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBoardApiBoardsBoardIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get Board
     */
    async getBoardApiBoardsBoardIdGetRaw(requestParameters: GetBoardApiBoardsBoardIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BoardOut>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling getBoardApiBoardsBoardIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/boards/{board_id}`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BoardOutFromJSON(jsonValue));
    }

    /**
     * Get Board
     */
    async getBoardApiBoardsBoardIdGet(requestParameters: GetBoardApiBoardsBoardIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BoardOut> {
        const response = await this.getBoardApiBoardsBoardIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Boards
     */
    async listBoardsApiBoardsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BoardOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/boards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BoardOutFromJSON));
    }

    /**
     * List Boards
     */
    async listBoardsApiBoardsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BoardOut>> {
        const response = await this.listBoardsApiBoardsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List Cards
     */
    async listCardsApiBoardsBoardIdCardsGetRaw(requestParameters: ListCardsApiBoardsBoardIdCardsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CardOut>>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling listCardsApiBoardsBoardIdCardsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/boards/{board_id}/cards`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CardOutFromJSON));
    }

    /**
     * List Cards
     */
    async listCardsApiBoardsBoardIdCardsGet(requestParameters: ListCardsApiBoardsBoardIdCardsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CardOut>> {
        const response = await this.listCardsApiBoardsBoardIdCardsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Users
     */
    async listUsersApiBoardsBoardIdUsersGetRaw(requestParameters: ListUsersApiBoardsBoardIdUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserOutPublic>>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling listUsersApiBoardsBoardIdUsersGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/boards/{board_id}/users`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserOutPublicFromJSON));
    }

    /**
     * List Users
     */
    async listUsersApiBoardsBoardIdUsersGet(requestParameters: ListUsersApiBoardsBoardIdUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserOutPublic>> {
        const response = await this.listUsersApiBoardsBoardIdUsersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Share Board
     */
    async shareBoardApiBoardsBoardIdUsersUserIdPutRaw(requestParameters: ShareBoardApiBoardsBoardIdUsersUserIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling shareBoardApiBoardsBoardIdUsersUserIdPut().'
            );
        }

        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling shareBoardApiBoardsBoardIdUsersUserIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/boards/{board_id}/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Share Board
     */
    async shareBoardApiBoardsBoardIdUsersUserIdPut(requestParameters: ShareBoardApiBoardsBoardIdUsersUserIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.shareBoardApiBoardsBoardIdUsersUserIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unshare Board
     */
    async unshareBoardApiBoardsBoardIdUsersUserIdDeleteRaw(requestParameters: UnshareBoardApiBoardsBoardIdUsersUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling unshareBoardApiBoardsBoardIdUsersUserIdDelete().'
            );
        }

        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling unshareBoardApiBoardsBoardIdUsersUserIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/boards/{board_id}/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Unshare Board
     */
    async unshareBoardApiBoardsBoardIdUsersUserIdDelete(requestParameters: UnshareBoardApiBoardsBoardIdUsersUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unshareBoardApiBoardsBoardIdUsersUserIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Update Board
     */
    async updateBoardApiBoardsBoardIdPatchRaw(requestParameters: UpdateBoardApiBoardsBoardIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BoardOut>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling updateBoardApiBoardsBoardIdPatch().'
            );
        }

        if (requestParameters['boardInUpdate'] == null) {
            throw new runtime.RequiredError(
                'boardInUpdate',
                'Required parameter "boardInUpdate" was null or undefined when calling updateBoardApiBoardsBoardIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/boards/{board_id}`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BoardInUpdateToJSON(requestParameters['boardInUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BoardOutFromJSON(jsonValue));
    }

    /**
     * Update Board
     */
    async updateBoardApiBoardsBoardIdPatch(requestParameters: UpdateBoardApiBoardsBoardIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BoardOut> {
        const response = await this.updateBoardApiBoardsBoardIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
