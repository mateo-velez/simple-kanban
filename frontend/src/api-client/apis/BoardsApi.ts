/* tslint:disable */
/* eslint-disable */
/**
 * Simple Kanban API
 * A simple kanban API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BoardInCreate,
  BoardInUpdate,
  BoardOut,
  CardInCreate,
  CardOut,
  HTTPValidationError,
} from '../models/index';
import {
    BoardInCreateFromJSON,
    BoardInCreateToJSON,
    BoardInUpdateFromJSON,
    BoardInUpdateToJSON,
    BoardOutFromJSON,
    BoardOutToJSON,
    CardInCreateFromJSON,
    CardInCreateToJSON,
    CardOutFromJSON,
    CardOutToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface CreateBoardBoardsPostRequest {
    boardInCreate: BoardInCreate;
}

export interface CreateCardsBoardsBoardIdCardsPostRequest {
    boardId: number;
    cardInCreate: Array<CardInCreate>;
}

export interface DeleteBoardBoardsBoardIdDeleteRequest {
    boardId: number;
}

export interface GetBoardBoardsBoardIdGetRequest {
    boardId: number;
}

export interface ListCardsBoardsBoardIdCardsGetRequest {
    boardId: number;
}

export interface ShareBoardBoardsBoardIdUsersUserIdPutRequest {
    userId: number;
    boardId: number;
}

export interface UnshareBoardBoardsBoardIdUsersUserIdDeleteRequest {
    userId: number;
    boardId: number;
}

export interface UpdateBoardBoardsBoardIdPatchRequest {
    boardId: number;
    boardInUpdate: BoardInUpdate;
}

/**
 * 
 */
export class BoardsApi extends runtime.BaseAPI {

    /**
     * Create Board
     */
    async createBoardBoardsPostRaw(requestParameters: CreateBoardBoardsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BoardOut>> {
        if (requestParameters['boardInCreate'] == null) {
            throw new runtime.RequiredError(
                'boardInCreate',
                'Required parameter "boardInCreate" was null or undefined when calling createBoardBoardsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/boards`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BoardInCreateToJSON(requestParameters['boardInCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BoardOutFromJSON(jsonValue));
    }

    /**
     * Create Board
     */
    async createBoardBoardsPost(requestParameters: CreateBoardBoardsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BoardOut> {
        const response = await this.createBoardBoardsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Cards
     */
    async createCardsBoardsBoardIdCardsPostRaw(requestParameters: CreateCardsBoardsBoardIdCardsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CardOut>>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling createCardsBoardsBoardIdCardsPost().'
            );
        }

        if (requestParameters['cardInCreate'] == null) {
            throw new runtime.RequiredError(
                'cardInCreate',
                'Required parameter "cardInCreate" was null or undefined when calling createCardsBoardsBoardIdCardsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/boards/{board_id}/cards`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['cardInCreate']!.map(CardInCreateToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CardOutFromJSON));
    }

    /**
     * Create Cards
     */
    async createCardsBoardsBoardIdCardsPost(requestParameters: CreateCardsBoardsBoardIdCardsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CardOut>> {
        const response = await this.createCardsBoardsBoardIdCardsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Board
     */
    async deleteBoardBoardsBoardIdDeleteRaw(requestParameters: DeleteBoardBoardsBoardIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling deleteBoardBoardsBoardIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/boards/{board_id}`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Board
     */
    async deleteBoardBoardsBoardIdDelete(requestParameters: DeleteBoardBoardsBoardIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBoardBoardsBoardIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get Board
     */
    async getBoardBoardsBoardIdGetRaw(requestParameters: GetBoardBoardsBoardIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BoardOut>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling getBoardBoardsBoardIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/boards/{board_id}`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BoardOutFromJSON(jsonValue));
    }

    /**
     * Get Board
     */
    async getBoardBoardsBoardIdGet(requestParameters: GetBoardBoardsBoardIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BoardOut> {
        const response = await this.getBoardBoardsBoardIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Boards
     */
    async listBoardsBoardsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BoardOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/boards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BoardOutFromJSON));
    }

    /**
     * List Boards
     */
    async listBoardsBoardsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BoardOut>> {
        const response = await this.listBoardsBoardsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List Cards
     */
    async listCardsBoardsBoardIdCardsGetRaw(requestParameters: ListCardsBoardsBoardIdCardsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CardOut>>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling listCardsBoardsBoardIdCardsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/boards/{board_id}/cards`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CardOutFromJSON));
    }

    /**
     * List Cards
     */
    async listCardsBoardsBoardIdCardsGet(requestParameters: ListCardsBoardsBoardIdCardsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CardOut>> {
        const response = await this.listCardsBoardsBoardIdCardsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Share Board
     */
    async shareBoardBoardsBoardIdUsersUserIdPutRaw(requestParameters: ShareBoardBoardsBoardIdUsersUserIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling shareBoardBoardsBoardIdUsersUserIdPut().'
            );
        }

        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling shareBoardBoardsBoardIdUsersUserIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/boards/{board_id}/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Share Board
     */
    async shareBoardBoardsBoardIdUsersUserIdPut(requestParameters: ShareBoardBoardsBoardIdUsersUserIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.shareBoardBoardsBoardIdUsersUserIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unshare Board
     */
    async unshareBoardBoardsBoardIdUsersUserIdDeleteRaw(requestParameters: UnshareBoardBoardsBoardIdUsersUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling unshareBoardBoardsBoardIdUsersUserIdDelete().'
            );
        }

        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling unshareBoardBoardsBoardIdUsersUserIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/boards/{board_id}/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Unshare Board
     */
    async unshareBoardBoardsBoardIdUsersUserIdDelete(requestParameters: UnshareBoardBoardsBoardIdUsersUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unshareBoardBoardsBoardIdUsersUserIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Update Board
     */
    async updateBoardBoardsBoardIdPatchRaw(requestParameters: UpdateBoardBoardsBoardIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BoardOut>> {
        if (requestParameters['boardId'] == null) {
            throw new runtime.RequiredError(
                'boardId',
                'Required parameter "boardId" was null or undefined when calling updateBoardBoardsBoardIdPatch().'
            );
        }

        if (requestParameters['boardInUpdate'] == null) {
            throw new runtime.RequiredError(
                'boardInUpdate',
                'Required parameter "boardInUpdate" was null or undefined when calling updateBoardBoardsBoardIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/boards/{board_id}`.replace(`{${"board_id"}}`, encodeURIComponent(String(requestParameters['boardId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BoardInUpdateToJSON(requestParameters['boardInUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BoardOutFromJSON(jsonValue));
    }

    /**
     * Update Board
     */
    async updateBoardBoardsBoardIdPatch(requestParameters: UpdateBoardBoardsBoardIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BoardOut> {
        const response = await this.updateBoardBoardsBoardIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
