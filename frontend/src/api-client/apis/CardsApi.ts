/* tslint:disable */
/* eslint-disable */
/**
 * Simple Kanban API
 * A simple kanban API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CardInUpdate,
  CardOut,
  HTTPValidationError,
} from '../models/index';
import {
    CardInUpdateFromJSON,
    CardInUpdateToJSON,
    CardOutFromJSON,
    CardOutToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface DeleteCardCardsCardIdDeleteRequest {
    cardId: number;
}

export interface GetCardCardsCardIdGetRequest {
    cardId: number;
}

export interface UpdateCardCardsCardIdPatchRequest {
    cardId: number;
    cardInUpdate: CardInUpdate;
}

/**
 * 
 */
export class CardsApi extends runtime.BaseAPI {

    /**
     * Delete Card
     */
    async deleteCardCardsCardIdDeleteRaw(requestParameters: DeleteCardCardsCardIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cardId'] == null) {
            throw new runtime.RequiredError(
                'cardId',
                'Required parameter "cardId" was null or undefined when calling deleteCardCardsCardIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/cards/{card_id}`.replace(`{${"card_id"}}`, encodeURIComponent(String(requestParameters['cardId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Card
     */
    async deleteCardCardsCardIdDelete(requestParameters: DeleteCardCardsCardIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCardCardsCardIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get Card
     */
    async getCardCardsCardIdGetRaw(requestParameters: GetCardCardsCardIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CardOut>> {
        if (requestParameters['cardId'] == null) {
            throw new runtime.RequiredError(
                'cardId',
                'Required parameter "cardId" was null or undefined when calling getCardCardsCardIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/cards/{card_id}`.replace(`{${"card_id"}}`, encodeURIComponent(String(requestParameters['cardId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CardOutFromJSON(jsonValue));
    }

    /**
     * Get Card
     */
    async getCardCardsCardIdGet(requestParameters: GetCardCardsCardIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CardOut> {
        const response = await this.getCardCardsCardIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Card
     */
    async updateCardCardsCardIdPatchRaw(requestParameters: UpdateCardCardsCardIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CardOut>> {
        if (requestParameters['cardId'] == null) {
            throw new runtime.RequiredError(
                'cardId',
                'Required parameter "cardId" was null or undefined when calling updateCardCardsCardIdPatch().'
            );
        }

        if (requestParameters['cardInUpdate'] == null) {
            throw new runtime.RequiredError(
                'cardInUpdate',
                'Required parameter "cardInUpdate" was null or undefined when calling updateCardCardsCardIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/cards/{card_id}`.replace(`{${"card_id"}}`, encodeURIComponent(String(requestParameters['cardId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CardInUpdateToJSON(requestParameters['cardInUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CardOutFromJSON(jsonValue));
    }

    /**
     * Update Card
     */
    async updateCardCardsCardIdPatch(requestParameters: UpdateCardCardsCardIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CardOut> {
        const response = await this.updateCardCardsCardIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
